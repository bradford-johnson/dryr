[
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "Projects Page"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nBradford Johnson\n",
    "section": "",
    "text": "Under Construction!\n\n\nWe’re Cooking Up Something Fresh! Check Back Soon!\n\n\n\nBradford Johnson\n\n\nData Analyst & Visualization Engineer\n\n\nDesign and implement visually striking data visualizations, translating complex data into meaningful narratives that drive business success.\n\n\nGet in touch\n\n\n\n\n\nData Visualization\n\n\nThrough skillful storytelling and attention to industry standards, I create deliverables that not only inform but truly engage. The goal is not just to present data; it’s to immerse the audience in a meaningful and memorable data-driven experience.\n\n\n\n\n\n\nData Warehousing & Pipelines\n\n\nExperienced in building distributed systems and ETL pipelines, I specialize in creating unified data ecosystems. I streamline workflows and ensure seamless data transformation, aiming to facilitate insightful decision-making across the entire system.\n\n\n\n\n\n\n\n\nData Visualization\n\n\nThrough skillful storytelling and attention to industry standards, I create deliverables that not only inform but truly engage. The goal is not just to present data; it’s to immerse the audience in a meaningful and memorable data-driven experience.\n\n\n\n\n\n\nData Warehousing & Pipelines\n\n\nExperienced in building distributed systems and ETL pipelines, I specialize in creating unified data ecosystems. I streamline workflows and ensure seamless data transformation, aiming to facilitate insightful decision-making across the entire system.\n\n\n\n\n\n\n\n\nAbout Me\n\n\nCard subtitle\n\n\nSome quick example text to build on the card title and make up the bulk of the card’s content.\n\nCard link Another link\n\n\n\n\n\nd3 = require(\"d3\")\n\nfunction generateNormalData(mean, stdDev, resolution) {\n  const normalData = [];\n  const step = 1 / resolution;\n\n  for (let x = 0; x &lt;= 1; x += step) {\n    const exponent = -((x - mean) ** 2) / (2 * stdDev ** 2);\n    const y = (1 / (stdDev * Math.sqrt(2 * Math.PI))) * Math.exp(exponent);\n    normalData.push({ x, y });\n  }\n\n  return normalData;\n}\n\nchartContainer = d3.select(\"#chart\");\n\nwidth = window.innerWidth * 0.3;\nheight = window.innerHeight * 0.15;\n\nmean = 0.5;\n\nstdDev = 0.1;\n\nresolution = 100;\n\ndata = generateNormalData(mean, stdDev, resolution);\n\ndata2stdDev = generateNormalData(mean + 2 * stdDev, stdDev, resolution);\n\nxScale = d3.scaleLinear()\n  .domain([0, d3.max(data, d =&gt; d.x)])\n  .range([0, width]);\n\nyScale = d3.scaleLinear()\n  .domain([0, d3.max(data, d =&gt; d.y)])\n  .range([height, 0]);\n\nline = d3.line()\n  .x(d =&gt; xScale(d.x))\n  .y(d =&gt; yScale(d.y));\n\nmargin = ({ top: 20, right: 20, bottom: 20, left: 20 });\n\nsvg = d3.select(\"#chart\")\n  .append(\"svg\")\n  .attr(\"width\", width + margin.left + margin.right)\n  .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n  .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n svg.append(\"path\")\n  .data([data])\n  .attr(\"class\", \"line\")\n  .attr(\"d\", line)\n  .style(\"stroke\", \"#1a1a1a\")\n  .style(\"stroke-width\", 2)\n  .style(\"fill\", \"none\")\n  .transition()\n  .duration(2500)\n  .attrTween(\"stroke-dasharray\", function () {\n    const totalLength = this.getTotalLength();\n    return function (t) {\n      return (d3.interpolateString(\"0,\" + totalLength, totalLength + \",0\"))(t);\n    };\n  });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsvg.append(\"path\")\n  .data([data2stdDev])\n  .attr(\"class\", \"line\")\n  .attr(\"d\", line)\n  .style(\"stroke\", \"#d9534f\")\n  .style(\"stroke-width\", 2)\n  .style(\"fill\", \"none\")\n  .transition()\n  .duration(4000)\n  .attrTween(\"stroke-dasharray\", function () {\n    const totalLength = this.getTotalLength();\n    return function (t) {\n      return (d3.interpolateString(\"0,\" + totalLength, totalLength + \",0\"))(t);\n    };\n  });\n\n\n\n\n\n\n\nxAxis = d3.axisBottom(xScale);\n\nyAxis = d3.axisLeft(yScale);"
  }
]