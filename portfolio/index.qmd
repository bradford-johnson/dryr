---
format:
  html:
    page-layout: full
execute:
  echo: false
  output: false
---

<div class="alert alert-dismissible alert-warning">
  <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  <h4 class="alert-heading">Under Construction!</h4>
  <p class="mb-0">We're Cooking Up Something Fresh! Check Back Soon!</p>
</div>

<h1 class="title">Bradford Johnson</h1>
<p class="subtitle lead">Data Analyst & Visualization Engineer</p>
<div class="description">Design and implement visually striking data visualizations, translating complex data into meaningful narratives that drive business success.</div>
<br>
```{=html}
<button type="button" class="btn btn-outline-primary">Get in touch</button>
```

<br>

<div class="card-group">
<div class="card bg-secondary mb-3">
<div class="card-body">
<h4 class="card-title">Data Visualization</h4>
<p class="card-text"> 
  Through skillful storytelling and attention to industry standards, I create deliverables that not only inform but truly engage. The goal is not just to present data; it's to immerse the audience in a meaningful and memorable data-driven experience.
</p>
</div>
</div>

<div class="card bg-secondary mb-3">
<div class="card-body">
<h4 class="card-title">Data Warehousing & Pipelines</h4>
<p class="card-text"> 
  Experienced in building distributed systems and ETL pipelines, I specialize in creating unified data ecosystems. I streamline workflows and ensure seamless data transformation, aiming to facilitate insightful decision-making across the entire system.
</p>
</div>
</div>
</div>

<div class="card-group">
<div class="card bg-secondary mb-3">
<div class="card-body">
<h4 class="card-title">Data Visualization</h4>
<p class="card-text"> 
  Through skillful storytelling and attention to industry standards, I create deliverables that not only inform but truly engage. The goal is not just to present data; it's to immerse the audience in a meaningful and memorable data-driven experience.
</p>
</div>
</div>

<div class="card bg-secondary mb-3">
<div class="card-body">
<h4 class="card-title">Data Warehousing & Pipelines</h4>
<p class="card-text"> 
  Experienced in building distributed systems and ETL pipelines, I specialize in creating unified data ecosystems. I streamline workflows and ensure seamless data transformation, aiming to facilitate insightful decision-making across the entire system.
</p>
</div>
</div>
</div>

<br>

<div class="card">
<div class="card-body">
<h4 class="card-title">About Me</h4>
<h6 class="card-subtitle mb-2 text-muted">Card subtitle</h6>
<p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
<a href="#" class="card-link">Card link</a>
<a href="#" class="card-link">Another link</a>
</div>
</div>

<br>



<!---<div class="chart"></div>--->

```{ojs}
d3 = require("d3")

function generateNormalData(mean, stdDev, resolution) {
  const normalData = [];
  const step = 1 / resolution;

  for (let x = 0; x <= 1; x += step) {
    const exponent = -((x - mean) ** 2) / (2 * stdDev ** 2);
    const y = (1 / (stdDev * Math.sqrt(2 * Math.PI))) * Math.exp(exponent);
    normalData.push({ x, y });
  }

  return normalData;
}

chartContainer = d3.select("#chart");

width = window.innerWidth * 0.3;
height = window.innerHeight * 0.15;

mean = 0.5;

stdDev = 0.1;

resolution = 100;

data = generateNormalData(mean, stdDev, resolution);

data2stdDev = generateNormalData(mean + 2 * stdDev, stdDev, resolution);

xScale = d3.scaleLinear()
  .domain([0, d3.max(data, d => d.x)])
  .range([0, width]);

yScale = d3.scaleLinear()
  .domain([0, d3.max(data, d => d.y)])
  .range([height, 0]);

line = d3.line()
  .x(d => xScale(d.x))
  .y(d => yScale(d.y));

margin = ({ top: 20, right: 20, bottom: 20, left: 20 });

svg = d3.select("#chart")
  .append("svg")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.top + margin.bottom)
  .append("g")
  .attr("transform", `translate(${margin.left},${margin.top})`);

 svg.append("path")
  .data([data])
  .attr("class", "line")
  .attr("d", line)
  .style("stroke", "#1a1a1a")
  .style("stroke-width", 2)
  .style("fill", "none")
  .transition()
  .duration(2500)
  .attrTween("stroke-dasharray", function () {
    const totalLength = this.getTotalLength();
    return function (t) {
      return (d3.interpolateString("0," + totalLength, totalLength + ",0"))(t);
    };
  });

svg.append("path")
  .data([data2stdDev])
  .attr("class", "line")
  .attr("d", line)
  .style("stroke", "#d9534f")
  .style("stroke-width", 2)
  .style("fill", "none")
  .transition()
  .duration(4000)
  .attrTween("stroke-dasharray", function () {
    const totalLength = this.getTotalLength();
    return function (t) {
      return (d3.interpolateString("0," + totalLength, totalLength + ",0"))(t);
    };
  });

xAxis = d3.axisBottom(xScale);

yAxis = d3.axisLeft(yScale);
```